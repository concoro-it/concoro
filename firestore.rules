rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to validate work preferences
    function isValidWorkPreferences() {
      let data = request.resource.data;
      return (
        // RegioniPreferite must be an array of strings
        (!('RegioniPreferite' in data) || 
         (data.RegioniPreferite is list && data.RegioniPreferite.size() <= 20)) &&
        
        // SettoriInteresse must be an array of strings
        (!('SettoriInteresse' in data) || 
         (data.SettoriInteresse is list && data.SettoriInteresse.size() <= 7)) &&
        
        // TipologiaContratto must be a string from the allowed list
        (!('TipologiaContratto' in data) || 
         data.TipologiaContratto in ['Tempo Indeterminato', 'Tempo Determinato', 'Part-time', 'Apprendistato', 'Stage']) &&
        
        // TitoloStudio must be a string from the allowed list
        (!('TitoloStudio' in data) || 
         data.TitoloStudio in ['Licenza Media', 'Diploma', 'Laurea Triennale', 'Laurea Magistrale', 'Dottorato']) &&
        
        // EntiPreferiti must be an array of strings
        (!('EntiPreferiti' in data) || 
         (data.EntiPreferiti is list && data.EntiPreferiti.size() <= 50)) &&
        
        // updatedAt must be a string in ISO format or timestamp
        (!('updatedAt' in data) || 
         data.updatedAt is string || data.updatedAt is timestamp)
      );
    }

    // Rules for user profiles
    match /userProfiles/{userId} {
      // Allow read if authenticated, write if it's their own profile
      allow read: if isAuthenticated();
      allow create, update: if isOwner(userId);
      allow delete: if isOwner(userId);

      // Rules for matches subcollection
      match /matches/{matchId} {
        allow read: if isAuthenticated() && isOwner(userId);
      }

      // Rules for education subcollection
      match /education/{document=**} {
        allow read, write: if isOwner(userId);
      }

      // Rules for experience subcollection
      match /experience/{document=**} {
        allow read, write: if isOwner(userId);
      }

      // Rules for skills subcollection
      match /skills/{document=**} {
        allow read, write: if isOwner(userId);
      }

      // Rules for certifications subcollection
      match /certifications/{document=**} {
        allow read, write: if isOwner(userId);
      }

      // Rules for publications subcollection
      match /publications/{document=**} {
        allow read, write: if isOwner(userId);
      }

      // Rules for languages subcollection
      match /languages/{document=**} {
        allow read, write: if isOwner(userId);
      }

      // Rules for volunteering subcollection
      match /volunteering/{document=**} {
        allow read, write: if isOwner(userId);
      }

      // Rules for projects subcollection
      match /projects/{document=**} {
        allow read, write: if isOwner(userId);
      }

      // Rules for saved jobs subcollection
      match /savedJobs/{jobId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() 
          && request.resource.data.userId == request.auth.uid;
        allow delete: if isAuthenticated() 
          && resource.data.userId == request.auth.uid;
      }

      // Rules for saved bandi subcollection
      match /savedBandi/{bandiId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() 
          && request.resource.data.userId == request.auth.uid
          && request.resource.data.concorso_id is string;
        allow delete: if isAuthenticated() 
          && resource.data.userId == request.auth.uid;
      }

      // Rules for notifications subcollection
      match /notifications/{notificationId} {
        // Allow users to read their own notifications
        allow read: if isAuthenticated() && isOwner(userId);
        
        // Allow users to update their own notifications (for marking as read)
        allow update: if isAuthenticated() && isOwner(userId)
          && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);
        
        // Allow system/backend to create notifications for users
        allow create: if isAuthenticated() 
          && request.resource.data.user_id == userId
          && request.resource.data.concorso_id is string
          && request.resource.data.daysLeft is int
          && request.resource.data.scadenza is timestamp
          && request.resource.data.timestamp is timestamp;
      }
    }

    // Rules for public profile access
    match /publicProfiles/{userId} {
      // Allow anyone to read public profiles
      allow read: if true;
      // Allow only the owner to update their public profile
      allow write: if isOwner(userId);
    }

    // Rules for concorsi collection - now with public read access
    match /concorsi/{concorsoId} {
      // Allow public read access for everyone
      allow read: if true;
      
      // Only allow admin users to write to concorsi
      allow write: if isAuthenticated() 
        && exists(/databases/$(database)/documents/userProfiles/$(request.auth.uid))
        && get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for jobs collection
    match /jobs/{jobId} {
      // Allow authenticated users to read jobs
      allow read: if isAuthenticated();
      
      // Only allow admin users to write to jobs
      allow write: if isAuthenticated() 
        && exists(/databases/$(database)/documents/userProfiles/$(request.auth.uid))
        && get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for savedconcorsi collection
    match /savedconcorsi/{documentId} {
      // Allow authenticated users to read their own saved concorsi
      allow read: if isAuthenticated() 
        && (resource == null || resource.data.userId == request.auth.uid);
      
      // Allow authenticated users to create their own saved concorsi
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.concorso_id is string;
      
      // Allow authenticated users to delete their own saved concorsi
      allow delete: if isAuthenticated() 
        && resource.data.userId == request.auth.uid;
    }

    // Rules for articoli collection - public access for blog
    match /articoli/{articoloId} {
      // Allow anyone to read articles
      allow read: if true;
      
      // Only allow admin users to write to articoli
      allow write: if isAuthenticated() 
        && exists(/databases/$(database)/documents/userProfiles/$(request.auth.uid))
        && get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 